total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
print(CKN(n-1, wordA))
print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
return((CKN(n , complete_word)/CKN(n-1, wordA)) + (lambda * PKN(wordA , wordB, n - 1)))
}
debug(PKN)
PKN(wordA = "his little", wordB = "fingers", n = 3)
PKN(wordA = "thanks for the", wordB = "follow", n = 4)
PKN(wordA = "thanks for the", wordB = "follow", n = 4)
undebug()
undebug(PKN)
PKN(wordA = "thanks for the", wordB = "follow", n = 4)
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
result <- (CKN(n , complete_word)/CKN(n-1, wordA)) + (lambda * PKN(wordA , wordB, n - 1))
return(result)
print(result)
}
PKN(wordA = "thanks for the", wordB = "follow", n = 4)
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
result <- (CKN(n , complete_word)/CKN(n-1, wordA)) + (lambda * PKN(wordA , wordB, n - 1))
print(result)
return(result)
}
PKN(wordA = "thanks for the", wordB = "follow", n = 4)
PKN(wordA = "his little", wordB = "fingers", n = 3)
wordB <- "fingers"
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
p <- p_continuation(wordB)
if (p == 0){
print(discount + 0.01)
}
else{
print(p)
}
p <- p_continuation(wordB)
p
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
#low level pkn
pkn_low_level <- PKN(wordA , wordB, n - 1)
result <- (CKN(n , complete_word)/CKN(n-1, wordA)) + (lambda * pkn_low_level)
print(result)
#check if the results are not NaN, other wise return low level PKN value
if (is.nan(result)){
return(pkn_low_level)
}
else{
return(result)
}
}
PKN(wordA = "his little", wordB = "fingers", n = 3)
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
#low level pkn
pkn_low_level <- PKN(wordA , wordB, n - 1)
result <- (CKN(n , complete_word)/CKN(n-1, wordA)) + (lambda * pkn_low_level)
#print(result)
#check if the results are not NaN, other wise return low level PKN value
if (is.nan(result)){
return(pkn_low_level)
}
else{
return(result)
}
}
PKN(wordA = "his little", wordB = "fingers", n = 3)
PKN(wordA = "give me some", wordB = "sunshine", n = 4)
PKN(wordA = "give me some", wordB = "water", n = 4)
PKN(wordA = "in the", wordB = "cage", n = 3)
PKN(wordA = "in", wordB = "the", n = 3)
PKN(wordA = "in", wordB = "the", n = 2)
PKN(wordA = "in", wordB = "the", n = 1)
PKN(wordA = "in", wordB = "the", n = 2)
debug(PKN)
PKN(wordA = "his little", wordB = "fingers", n = 3)
PKN(wordA = "in", wordB = "the", n = 2)
PKN(wordA = "in", wordB = "the", n = 2)
CKN(n = 2 , complete_word = "in the")
CKN(n = 2 , word = "in the")
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
#low level pkn
pkn_low_level <- PKN(wordA , wordB, n - 1)
#count of string if put together
count_complete_word <- (CKN(n , complete_word))
result <- count_complete_word/CKN(n-1, wordA) + (lambda * pkn_low_level)
#print(result)
#check if the results are not NaN, other wise return low level PKN value
if (is.nan(result)){
return(pkn_low_level)
}
else{
return(result)
}
}
PKN(wordA = "in", wordB = "the", n = 2)
debug(PKN)
PKN(wordA = "in", wordB = "the", n = 2)
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
#low level pkn
pkn_low_level <- PKN(wordA , wordB, n - 1)
#count of string if put together
count_complete_word <- (CKN(n , complete_word))
result <- count_complete_word/total_count_wi_minus_1 + (lambda * pkn_low_level)
#print(result)
#check if the results are not NaN, other wise return low level PKN value
if (is.nan(result)){
return(pkn_low_level)
}
else{
return(result)
}
}
PKN(wordA = "in", wordB = "the", n = 2)
CKN(n = 2 , word = "in the")
PKN <- function(wordA, wordB, n){
discount <- 0.75
if(n == 1){
p <- p_continuation(wordB)
if (p == 0){
return(discount + 0.01)
}
else{
return(p)
}
}
#Debug
#print(length(wordA))
wordlist <- unlist(strsplit(toString(wordA), " "))
if(n == length(wordlist)){
i <- 1
while(i <= n-1 ){
wordA[i] <- wordlist[i + 1]
i <- i + 1
}
if (length(wordA) == 1){
wordA <- paste(wordA[1])
#print(wordA)
}
else if (length(wordA) == 2){
wordA <- paste(wordA[1], wordA[2])
# print(wordA)
}
}
# Total count of previous string in corpus
total_count_wi_minus_1 <- CKN(n-1, wordA)
if(total_count_wi_minus_1 == 0){
total_count_wi_minus_1 <- discount
}
#total count of word type discounted
total_word_type_discounted <- word_type_discounted(n , wordA)
if(total_word_type_discounted == 0){
total_word_type_discounted <- 0.1
}
complete_word <- paste(wordA, wordB, sep = " ")
lambda <- (discount / total_count_wi_minus_1) * total_word_type_discounted
#Debug
#print(CKN(n-1, wordA))
#print( word_type_discounted(n , wordA))
if(is.nan(lambda)){
lambda <- discount
}
#low level pkn
pkn_low_level <- PKN(wordA , wordB, n - 1)
#count of string if put together
count_complete_word <- (CKN(n , complete_word))
result <- max(count_complete_word/total_count_wi_minus_1,0) + (lambda * pkn_low_level)
#print(result)
#check if the results are not NaN, other wise return low level PKN value
if (is.nan(result)){
return(pkn_low_level)
}
else{
return(result)
}
}
PKN(wordA = "in", wordB = "the", n = 2)
max(5-7,0)
max(7-5,0)
max(5-10,0)
unigram_freq["in",]
View(bigram_freq)
View(bigram_freq)
View(unigram_freq)
View(unigram_freq)
View(corpus)
corpus[["content"]]
corpus[["meta"]]
install.packages("tau")
library(tau)
tau_ngrams <- function(x, ngrams) return(rownames(as.data.frame(unclass(textcnt(x,method="string",n=ngrams)))))
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, ngrams),
wordLengths = c(1, Inf)
))
library(ggplot2)
library(NLP)
library(tm)
library(textmineR)
library(RWeka)
library(wordcloud)
library(dplyr)
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, ngrams),
wordLengths = c(1, Inf)
))
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, ngrams),
wordLengths = c(1, Inf)
))
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, 1),
wordLengths = c(1, Inf)
))
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, 2),
wordLengths = c(1, Inf)
))
clean.tdm <- TermDocumentMatrix(corpus,
control = list(tokenize = function(x) tau_ngrams(x, ngrams),
wordLengths = c(1, Inf)
))
?TermDocumentMatrix
View(quadgram_freq)
View(quadgram_freq)
strsplit(word, sep = " ")
